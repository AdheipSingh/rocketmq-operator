// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/alpha/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.MetaService":       schema_pkg_apis_rocketmq_v1alpha1_MetaService(ref),
		"github.com/alpha/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.MetaServiceSpec":   schema_pkg_apis_rocketmq_v1alpha1_MetaServiceSpec(ref),
		"github.com/alpha/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.MetaServiceStatus": schema_pkg_apis_rocketmq_v1alpha1_MetaServiceStatus(ref),
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_MetaService(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaService is the Schema for the metaservices API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/alpha/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.MetaServiceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/alpha/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.MetaServiceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/alpha/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.MetaServiceSpec", "github.com/alpha/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.MetaServiceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_MetaServiceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaServiceSpec defines the desired state of MetaService",
				Properties: map[string]spec.Schema{
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size is the number of the name service Pod",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"metaServiceImage": {
						SchemaProps: spec.SchemaProps{
							Description: "MetaServiceImage is the RocketMQ name service container image to use for the Pods",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullPolicy defines how the image is pulled.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"size", "metaServiceImage", "imagePullPolicy"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_MetaServiceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetaServiceStatus defines the observed state of MetaService",
				Properties: map[string]spec.Schema{
					"metaServers": {
						SchemaProps: spec.SchemaProps{
							Description: "MetaServers is the name service ip list like [192.168.1.1,192.168.1.2]",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"metaServers"},
			},
		},
		Dependencies: []string{},
	}
}
